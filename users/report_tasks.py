import threading
from io import BytesIO
from django.core.files.base import ContentFile
from reportlab.pdfgen import canvas
from .models import Report
import time


def generate_report_background(report_id):
    """Handles the actual PDF generation asynchronously."""
    report = Report.objects.get(id=report_id)
    report.status = 'processing'
    report.save()

    try:
        buffer = BytesIO()
        p = canvas.Canvas(buffer)
        p.setFont("Helvetica-Bold", 18)
        p.drawString(100, 780, "CLUB MANAGEMENT REPORT")
        p.setFont("Helvetica", 12)
        p.drawString(100, 750, f"Title: {report.title}")
        p.drawString(100, 730, f"Generated By: {report.generated_by.username}")
        p.drawString(100, 710, "This is a sample system-generated report.")
        p.showPage()
        p.save()

        pdf_file = ContentFile(buffer.getvalue())
        report.file.save(f"{report.title}.pdf", pdf_file)
        buffer.close()

        report.status = 'completed'
        report.save()
    except Exception as e:
        print("Error generating report:", e)
        report.status = 'failed'
        report.save()


def start_report_generation(report):
    """Starts the background thread."""
    thread = threading.Thread(target=generate_report_background, args=(report.id,))
    thread.start()


def _report_worker_loop():
    """Very small background worker used by start_report_worker (no-op)."""
    while True:
        # placeholder: sleep to simulate background work
        time.sleep(1)


def start_report_worker(daemon=True):
    """
    Start a background thread for report tasks. Tests will patch threading.Thread,
    or call this to ensure the attribute exists.
    """
    t = threading.Thread(target=_report_worker_loop, daemon=daemon)
    t.start()
    return t
